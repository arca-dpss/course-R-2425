---
title: "3.3_apply"
format: 
   revealjs:
     margin: 0.1
editor: visual
---

## `*apply` family

Immaginate di avere una lista di vettori, e di voler applicare la stessa funzione/i ad ogni elemento della lista:

-   applico manualmente la funzione selezionando gli elementi

-   ciclo **`for`** che itera sugli elementi della lista e applica la funzione/i

    ...

```{r, echo=TRUE}
my_list=list(
    vec1=rnorm(100),
    vec2=runif(100),
    vec3=rnorm(100),
    vec4=rnorm(100)
)
```

## `*apply` family

::: columns
::: {.column width="60%"}
Applichiamo media, mediana e std

```{r, echo=TRUE}
# inizializzo i vettori
means=vector(mode = "numeric", 
             length = length(my_list))
medians=vector(mode = "numeric", 
               length = length(my_list))
stds=vector(mode = "numeric", 
            length = length(my_list))

# Loop
for(i in 1:length(my_list)){
  
  means[i] <- mean(my_list[[i]]) 
  medians[i] <- median(my_list[[i]]) 
  stds[i] <- sd(my_list[[i]])
}
```
:::

::: {.column width="40%"}
Risultato

```{r, echo=TRUE}
means 

medians

stds
```
:::
:::

## `*apply` family

Funziona tutto! ma:

-   il for è molto laborioso da scrivere gli indici sia per la lista che per il vettore che stiamo popolando

-   dobbiamo pre-allocare delle variabili (per il motivo della velocità che dicevo)

-   8 righe di codice (per questo esempio semplice)

## `*apply` family

In R è presente una famiglia di funzioni apply come **`lapply`**, **`sapply`**, etc. che permettono di ottenere lo stesso risultato in modo più conciso, rapido e semplice:

```{r, echo=TRUE}
means=sapply(my_list, mean)
medians=sapply(my_list, median)
stds=sapply(my_list, sd)

means
medians
stds
```

## `*apply` family

Prima di introdurre l'**`*apply`** family un piccolo bonus. Sfruttando il fatto che in R tutto è un oggetto possiamo scrivere in modo ancora più conciso:

```{r,echo=TRUE}
# lista di funzioni
my_funs=list(median = median, mean = mean, sd = sd)

# applico ai vettori della mia lista le funzioni nella lista my_fun
lapply(my_list, function(vec) sapply(my_funs, function(fun) fun(vec)))
```

## `*apply` family

**apply( \< lista \> , \< funzione \> )**

-   Cosa può essere la **lista**?
    -   lista

    -   dataframe

    -   vettore
-   Cosa può essere la **funzione**?
    -   base o importata da un pacchetto

    -   custom

    -   anonima

## `*apply` family

Prima di analizzare l'**`*apply`** family, credo sia utile un ulteriore parallelismo con il ciclo for che abbiamo visto. **`apply`** non è altro che un ciclo **`for`**, leggermente semplificato.

::: columns
::: {.column width="50%"}
Ciclo **`for`**

```{r, echo=TRUE}
vec = 1:5
for(i in vec){
  print(i)}
```
:::

::: {.column width="50%"}
**`sapply`**

```{r, echo=TRUE}
vec = 1:5
res = sapply(vec, print)
```
:::
:::

## `*apply` family - funzione custom

Possiamo utlizzare anche funzioni create da noi:

```{r, echo=TRUE}
center_var = function(x) x - mean(x)

my_list = list(
    vec1 = runif(10),
    vec2 = runif(10),
    vec3 = runif(10)
)

lapply(my_list, center_var)
```

## `*apply` family - implicito vs. esplicito

Quindi come il ciclo **`for`** scritto come **i** in **vec** assegna al valore **i** un **elemento** per volta dell'oggetto **vec**, internamente le funzioni **`*apply`** prendono il **primo elemento** dell'oggetto in **input** (lista) e **applicano** direttamente la funzione che abbiamo scelto.

::: columns
::: {.column width="40%"}
**`sapply`** implicito

```{r, echo=TRUE}
vec = 1:5
res = sapply(vec, print)
```
:::

::: {.column width="60%"}
**`sapply`** esplicito

```{r, echo=TRUE}
vec = 1:5
res = sapply(vec, function(i) print(i))
```
:::
:::

## `*apply` family - funzione anonima

Una funzione anonima è una funzione non salvata in un oggetto ma scritta per essere **eseguita direttamente**, all'interno di altre funzioni che lo permettono:

```{r, echo=TRUE}
lapply(my_list, function(x) x - mean(x))
```

**`x`** è solo un **placeholder** (analogo di i) e può essere qualsiasi lettera o nome!

## Tutte le tipologie di `*apply`

-   **`lapply()`**: la funzione di base

-   **`sapply()`**: simplified-apply

-   **`tapply()`**: poco utilizzata, utile con i fattori

-   **`apply()`**: utile per i dataframe/matrici

-   **`mapply()`**: versione multivariata, utilizza più liste contemporaneamente

-   **`vapply()`**: utilizzata dentro le funzioni e pacchetti

## `lapply`

**`lapply`** sta per list-apply e restituisce sempre una lista, applicando la funzione ad ogni elemento della lista in input:

```{r, echo=TRUE}
res=lapply(my_list, mean)
res
class(res)
```

## `sapply`

**`sapply`** sta per simplified-apply e (cerca) di restituire una versione più semplice di una lista, applicando la funzione ad ogni elemento della lista in input:

```{r, echo=TRUE}
res=sapply(my_list, mean)
res
class(res)
```

## `apply`

**`apply`** funziona in modo specifico per dataframe o matrici, applicando una funzione alle righe o alle colonne:

```{r, echo=TRUE}
my_df =data.frame(x1 = runif(5,1,10), x2 = runif(5,3,4))
my_df
```

## `apply`

Applico a tutte le righe (1) la funzione mean:

```{r, echo=TRUE}
apply(my_df, MARGIN = 1, FUN = mean)
```

Applico a tutte le colonne (2) la funzione mean:

```{r, echo=TRUE}
apply(my_df, MARGIN = 2, FUN = mean)
```

## `tapply`

**`tapply`** permette di applicare una funzione ad un vettore, dividendo questo vettore in base ad una variabile categoriale:

```{r, echo=TRUE}
vec=rnorm(75)

index=rep(c("a", "b", "c"), each = 25)

tapply(vec, INDEX = index, mean)
```

Qui dove *`INDEX`* è un vettore stringa o un fattore.

## `tapply`

In questo caso calcoliamo la media per ogni categoria d'età:

```{r, echo=TRUE, message=FALSE, warning=FALSE}
my_df = readr::read_csv("data/mydf_2.csv")
head(my_df)
tapply(my_df$age, my_df$age_cat, mean)
```

## `vapply`

**`vapply`** è una versione più solida delle precedenti dal punto di vista di programmazione. In pratica permette (e richiede) di specificare in anticipo la tipologia di dato che ci aspettiamo come risultato:

```{r, echo=TRUE}
vapply(my_list, FUN = mean, FUN.VALUE = numeric(length = 1))
```

*`FUN.VALUE = numeric(length = 1)`*: indica che ogni risultato è un singolo valore numerico.

## `mapply`

**`mapply`** permette di gestire **più liste contemporaneamente** per scenari più complessi. Ad esempio vogliamo usare la funzione **`rnorm()`** e generare 4 con diverse medie e deviazioni stardard in combinazione:

```{r, echo=TRUE}
medie=list(10, 20, 30, 40)
stds=list(1, 2, 3, 4)
mapply(function(x,y) rnorm(n = 5, mean = x, sd = y), medie, stds, SIMPLIFY = FALSE)
```

**IMPORTANTE**, tutte le liste incluse devono avere la stessa dimensione!

## `mapply` {.smaller}

**mapply(function(x,y) rnorm(n = 4, mean = x, sd = y), medie, stds, SIMPLIFY = FALSE)**

-   **`function(...)`**: è una funzione anonima come abbiamo visto prima che può avere n elementi

-   **`rnorm(n = 10, mean = x, sd = y)`**: è l'effettiva funzione anonima dove abbiamo i placeholders x and y

-   **`medie, stds`**: sono in **ordine** le liste corrispondenti ai placeholders indicati, quindi x = medie e y = stds

-   **`SIMPLIFY = FALSE`**: semplicemente dice di restituire una lista e non cercare (come sapply) di semplificare il risultato

## `mapply` come `for`

Lo stesso risultato (in modo più verboso) si ottiene con un **`for`** usando più volte l'iteratore i:

```{r, echo=TRUE}
medie=list(10, 20, 30)
stds=list(1,2,3)
res=vector(mode = "list", length = length(medie)) # lista vuota

for(i in 1:length(medie)){
  res[[i]] = rnorm(6, mean = medie[[i]], sd = stds[[i]])
} 
res
```

## `replicate`

Questa funzione permette di ripetere un operazione n volte, senza però utilizzare un iteratore o un placeholder.

**`replicate(n, expr)`**

-   ***`n`*** è il numero di ripetizioni

-   ***`expr`*** è la porzione di codice da ripetere

## `replicate`

Campioniamo 1000 volte da una normale e facciamo la media AKA distribuzione campionaria della media

::: columns
::: {.column width="50%"}
```{r, echo=TRUE}
nrep=1000

nsample=30

media=100

sd=30

means=
  replicate(
    n = nrep, 
    expr = {mean(
      rnorm(nsample, media, sd))}
    )
```
:::

::: {.column width="50%"}
```{r, echo=FALSE}
hist(means, main = "Distribuzione campionaria della media")
abline(v = mean(means), col = "blue", lwd = 3, lty = 2)  # Media stimata
abline(v = c(mean(means) - sd(means), mean(means) + sd(means)), col = "red", lwd = 3, lty = 3)  # Errore standard
```
:::
:::

## Ora facciamo un po' di pratica! {style="text-align: center;"}

<br/> Aprite e tenete aperto questo link:

https://etherpad.wikimedia.org/p/arca-corsoR
