---
title: "Recap"
format: revealjs
editor: visual
---

# Creare/nominare oggetti

## Creare/nominare oggetti

Gli oggetti si possono creare e tramite il comando **`<-`** oppure **`=`**

```{r, echo=TRUE}
x1 = 3 # nome = oggetto
x1

x2 <- 3 # nome <- oggetto
x2 

x1 == x2 # i due oggetti sono identici?
```

**I nomi degli oggetti devono iniziare con una lettera!! NON "nome" = ...ma nome = ...**

## Operatori Logici

In R è possibile congiungere più relazioni per valutare una desiderata proposizione.

```{r,echo = TRUE}
x = 30 #Assegnamo a x il valore 30.
```

| Funzione | Nome                   | Esempio       | Risulato |
|----------|------------------------|---------------|----------|
| `&`      | Congiunzione           | `x>25 & x<60` | `TRUE`   |
| `|`      | Disgiunzione Inclusiva | `x>25 | x>60` | `TRUE`   |
| `!`      | Negazione              | `!(x<18)`     | `TRUE`   |

# Vettori

## Vettori

-   **un valore**: il valore dell'elemento che può essere di qualsiasi tipo ad esempio un numero o una serie di caratteri

-   **un indice di posizione**: un numero intero positivo che identifica la sua posizione all'interno del vettore.

    ![](Untitled/vettore.png)

## Creare un vettore

I vettori si possono creare attraverso il comando **`c()`**, indicando tra le parentesi i valori degli elementi nella sucessione desiderata e separati da una virgola.

```{r, echo=TRUE}
num_vect = c(1,2,3,4)
# è possibile anche utilizzare la funzione seq()
num_vect_seq = seq(from = 1,to = 4, by = 1)

num_vect;num_vect_seq

char_vect = c("R","R","R","ok")
# è possibile anche utilizzare la funzione rep()
char_vect_rep = c(rep("R", 3), "ok")

char_vect;char_vect_rep
```

## Tiplogia di vettore

Un vettore deve esssere formato da **elementi tutti dello stesso tipo**!

```{r, echo=TRUE}
wrong = c(1,2,3,"non so", 4)
class(wrong) 
wrong
```

Altrimenti si "rischia" che tutto venga trasformato a carattere.

```{r, echo=TRUE}
correct = c(1,2,3,NA, 4)
class(correct) 
correct
```

## is.\* & as.\*

Possiamo testare o convertire (quando possibile) la tipologia del vettore attraverso queste funzioni **`is.`** & **`as.`**

```{r, echo = TRUE}
is.character(char_vect)
as.numeric(char_vect) #!!

is.numeric(num_vect)
as.character(num_vect) #!!

logi_vect = c(TRUE,FALSE,TRUE)
is.logical(logi_vect)

as.numeric(logi_vect) 
```

## Indicizzazione

Possiamo selezionare, eliminare, estrarre elementi semplicemente usando l'indice di posizione tramite le parentesi quadre vettore\[pos\]

```{r, echo=TRUE}
# Creo un vettore formato da 20 numeri casuali pescati da 1 a 100
my_vect = round(runif(n = 20,min = 1,max = 100))
my_vect

my_vect[1] # estraggo il primo elemento

my_vect[1:5] # estraggo i primi 5 elementi

my_vect[c(1,4,2,9)] # estraggo elementi a scelta

my_vect[length(my_vect)] #ultimo elemento (perchè?)
```

## Inidicizzazione negativa

Allo stesso modo possiamo decidere di estrarre tutti gli elementi del vettore eccetto alcuni

```{r, echo=TRUE}

my_vect[-c(1)] #tutti tranne il primo elemento

my_vect[-c(1:10)] #tutti tranne i primi 10
```

## Indicizzazione Logica

Indicizzare con la posizione è l'aspetto più semplice e intuitivo. E' possibile anche selezionare tramite valori **`TRUE`** e **`FALSE`**: possiamo estrarre elementi dal vettore basandoci su specifiche condizioni logiche

```{r, echo=TRUE}

numeri = 1:7
numeri
numeri[numeri<2]

```

# Fattori

## Fattori

I fattori si possono creare sia convertendo un vettore character attraverso il comando **`as.factor()`** che creando esplicitamente un fattore attraverso il comando **`factor()`**

```{r, echo=TRUE}

char_vect = rep(c("hello","ciao", "hola"), each = 2)
my_fact = as.factor(char_vect)

my_fact2 = factor(rep(c("hello","ciao", "hola"), each = 2))

my_fact == my_fact2
```

## Caratteristiche dei fattori

In pratica assegnano un'etichetta ad un valore numerico intero:

```{r, echo = TRUE}
typeof(my_fact)
```

```{r, echo=TRUE, warning=TRUE}
as.integer(my_fact) 
my_fact
```

## Livelli del fattore

I fattori permettono di avere dei livelli **`levels()`** come metadati, a prescindere da quali siano effettivamente presenti nel vettore

```{r, echo = TRUE}
levels(my_fact)

my_fact2 = my_fact[my_fact!="ciao"]
my_fact2
```

E' possibile però eslcudere i livelli non più utili attraverso il comando **`droplevels()`**

```{r, echo = TRUE}
droplevels(my_fact2) 
```

------------------------------------------------------------------------

E' possibile anche rinominare i livelli del fattore

```{r, echo=TRUE}
# il fattore che ho creato 
my_fact

# creo un altro fattore "my_fact_lev" identico a "my_fact"
my_fact_lev = my_fact
my_fact_lev == my_fact

# rinomino i livelli del fattore
levels(my_fact_lev) = c("italiano","inglese","spagnolo")

my_fact_lev

my_fact

```

------------------------------------------------------------------------

E' possibile sia riordinare che rinominare i livelli di un fattore attraverso la funzione **`factor()`**

```{r, echo=TRUE}
my_fact
# di default l'ordine di assegnazione è alfabetico 
as.integer(my_fact)

new_fact = factor(my_fact, levels = c("hello","ciao","hola"))
new_fact
as.integer(new_fact)

new_fact2 = factor(my_fact, levels = c("hello","ciao","hola"),
                   labels = c("inglese","italiano","spagnolo"))
new_fact2
```

------------------------------------------------------------------------

**Ricordate**: l'argomento ***`levels`*** dentro la funzione **`factor()`** serve a **riordinare** i livelli del fattore, mentre la funzione **`levels()`** li **rinomina** non riordina!

```{r, echo=TRUE}
# il fattore che ho creato 
my_fact
as.integer(my_fact)
levels(my_fact) = c("hello","ciao","hola")

# Cosa notate rispetto al vettore my_fact visualizzato sopra?
my_fact
as.integer(my_fact)
```

# Liste

## Liste

Le liste sono strutture flessibili che possono contenere oggetti di tipo differente e di differenti dimensioni (ogni elemento può essere a sua volta una lista)

```{r, echo=TRUE}
my_list = list("ciao!", 1:3, c(TRUE,FALSE), 
               list("ciao!", 1:3, c(TRUE,FALSE)))
str(my_list)
```

## Liste

La lista pur essendo unidimensionale, si sviluppa in profondità

```{r, echo=TRUE}
str(my_list)
```

## Liste

***Primo Livello***: lista

```{r, echo=TRUE}
str(my_list[2]) 
```

***Secondo Livello***: vettore numerico

```{r, echo=TRUE}
str(my_list[[2]]) 
```

***Terzo Livello***: numero intero

```{r, echo=TRUE}
str(my_list[[2]][1])# numero intero 
```

## Liste

E' possibile assegnare dei nomi agli elementi della lista...

```{r, echo=TRUE}
my_list_nam = list(parola = "ciao!",numeri =  1:3, 
                   logico = c(TRUE,FALSE), 
               lista = list("ciao!", 1:3, c(TRUE,FALSE)))
my_list_nam
```

## Liste

... ed accerdervi chiamandoli per "nome" attraverso l'operatore **`$`**

```{r, echo=TRUE}
my_list_nam$parola

my_list_nam$lista #lista creata come elemento della lista
```

## Liste - Attributi

Come per i vettori anche le liste hanno una lunghezza (**`lenght()`**) ed eventualmente dei nomi (**`names()`**). Il comando **`str()`** (struttura) è molto utile per le liste perchè fornisce una visione sulla struttura:

```{r, echo=TRUE}

length(my_list_nam); names(my_list_nam)

str(my_list_nam)
```

## Liste - Indicizzazione

La differenza tra le parentesi quadre riguarda il fatto se vogliamo fare un subset della lista ottenendo un'altra lista oppure se vogliamo accedere direttamente all'elemento interno:

```{r, echo=TRUE}
my_list_nam[1] #ottenendo un'altra lista 

my_list_nam[[1]] # accedo all'elemento interno
```

## Liste - Indicizzazione

Se vogliamo selezionare più elementi (quindi fare un vero e proprio subset della lista) dobbiamo sempre usare le parentesi quadre singole:

```{r, echo=TRUE}

#lista composta dai primi due elementi della my_list_nam 
my_list_nam[1:2] 
```

## Liste - Indicizzazione Nested

Le liste hanno una struttura unidimensionale ma che si può sviluppare in profondità. Per selezionare elementi nested si possono concatenare più parentesi:

```{r, echo=TRUE}

my_list_nam[[4]]

my_list_nam[[4]][[1]]

my_list_nam[[4]][[2]]

```

# Matrici

## Matrici

Le matrici sono una struttura dati **bidimensionale** (caratterizzate da 2 dimensioni **`dim()`** ) dove il numero di righe rappresenta la dimensione 1 e il numero di colonne la dimensione 2.

```{r, echo=TRUE}
my_mat = matrix(data = 1:10, nrow = 2, ncol = 5, byrow = FALSE)
my_mat
```

```{r, echo=TRUE}
matrix(data = 1:10, nrow = 2, ncol = 5, byrow = TRUE)
```

## Matrici - Caratteristiche

-   Possono contenere **una sola tipologia** di dati

-   Essendo **bidimensionali**, abbiamo bisogno di due indici di posizione (righe e colonne) per identificare un elemento

-   Possono essere viste come un **insieme** di singoli **vettori**

## Matrici - Caratteristiche

Il numero di righe e colonne non deve essere lo stesso necessariamente (matrice quadrata) ma il numero di righe deve essere compatibile con il vettore data:

```{r, echo=TRUE, warning=TRUE}
matrix(data = 1:10, ncol = 3, nrow = 3)
```

## Matrici

Cosa fa R di default?

```{r, echo=TRUE, warning=FALSE}

matrix(data = 1:10, ncol = 3, nrow = 3)

matrix(data = 1:2, ncol = 3, nrow = 3)

```

**`warnings`**: la funzione ci informa di qualcosa di potenzialmente problematico, ma (circa!!) tutto liscio

## Matrici - Indicizzazione

Per identificare uno o più elementi nella matrice abbiamo bisogno di indici/e di riga e/o colonna separati da virgola, sempre con le parentesi quadre: matrice\[riga, colonna\]

```{r, echo=TRUE}

my_mat
my_mat[1,1]

```

## Matrici - Indicizzazione

E' possibile anche selezionare un'intera riga o colonna

```{r, echo=TRUE}

my_mat[1,]

my_mat[,1]

```

## Matrici - Indicizzazione

Come per i vettori, anche in questo caso possiamo applicare l'indicizzazione logica:

```{r, echo=TRUE}
my_mat>2

# Tutti gli elementi maggiori di due
my_mat[my_mat>2]

```

## Vettori e Matrici

I vettori si creano attraverso la funzione **`c()`** e possono essere concatenati tra loro sempre attraverso la stessa funzione:

```{r, echo=TRUE}
my_vect1 = c(1:4); my_vect2 = c(5:10)
my_vect12 = c(my_vect1,my_vect2)
my_vect12
```

## Matrici

Similarmente, le matrici possono essere unite tra loro attraverso i comandi **`cbind()`** e **`rowbind()`** :

```{r, echo=TRUE}

my_mat = matrix(1:4,2,2)

cbind(my_mat, my_mat)

rbind(my_mat, my_mat)

```

# Dataframe

## Dataframe

Il dataframe è la struttura più "complessa", utile e potente di R. Da un punto di vista intuitivo è un foglio excel mentre da un punto di vista di R è una tipologia di lista con alcune caratteristiche/restrizioni

-   ogni elemento della lista è un **vettore** con un **nome associato** (aka una colonna)
-   ogni lista/colonna deve avere lo stesso numero di elementi
-   di conseguenza ogni riga ha lo stesso numero di elementi (**struttura rettangolare**)

## Crezione dataframe

Attraverso la funzione data.frame() è possibile creare un dataframe...

```{r, echo=TRUE}
# Creo un dataframe con 3 colonne 
my_df = data.frame( col1 = 1:4, col2 = letters[1:4],
                    col3 = rnorm(4)) 
my_df
```

## Attributi

Il **`dataframe`** ha sia gli attributi della **lista** ovvero i ***names*** ma anche gli attributi della **matrice** ovvero le ***dimensioni*** (righe e colonne)

```{r, echo=TRUE}
typeof(my_df)
attributes(my_df)
dim(my_df)
```

## Indicizzazione

Si posso utlizzare sia le parentesi quadre **`[]`** che il simbolo del dollaro **`$`**

```{r, echo = TRUE}
my_df[1] # estraggo un data.frame 5x1
my_df[[1]]# estraggo la prima colonna del data.frame
my_df$col1# estraggo la prima colonna del data.frame
my_df[1,1]#  estraggo il primo elemento della prima colonna del data.frame
```

## Indicizzazione - Operatori relazionali

Una delle operazioni più comuni che dovrete affrontare sarà sicuramente quella di estrarre/valutare un sottoinsieme di valori presenti nel vostro dataset:

```{r, echo=TRUE}
# includo solo le righe in cui alla colonna1 i valori sono maggiori di 2
my_df[my_df$col1 > 2, ]
my_df[my_df[1] > 2, ] 
```

## Esempi

```{r}
my_df
```

::: incremental
-   `my_df[my_df$col1 > 1 & my_df$col1 < 4, ]`
    -   2 b -0.5630882
    -   3 c -0.5672335
-   `my_df[my_df$col1== 1,  "col3"]`
    -   -1.481937
-   `my_df[my_df$col1== 1,  3]`
    -   -1.481937
:::

## Indicizzazione

Ci sono anche dei modi alternativi e più compatti di indicizzare. Ad esempio usando la funzione **`subset()`**:

```{r,echo=TRUE}

subset(iris, subset = Species == "setosa" & Petal.Length > 1.7)

```

equivalente a:

```{r,echo=TRUE}

iris[iris$Species == "setosa" & iris$Petal.Length > 1.7,]

```

------------------------------------------------------------------------

E' possibile anche selezionare colonne piuttosto che righe attraverso l'argomento ***`select`***:

```{r, echo=TRUE}
head(subset(iris, select = c(Sepal.Length, Species)), n = 3)
```

------------------------------------------------------------------------

Possiamo anche combinare le due cose:

```{r,echo=TRUE}
head(subset(iris, Species == "setosa" & Sepal.Length > 4, 
             c(Sepal.Length, Species)), n = 3)
```

equivalente a:

```{r,echo=TRUE}

head(iris[iris$Species == "setosa" & iris$Sepal.Length > 4, 
          c("Sepal.Length","Species")],n = 3)
```

------------------------------------------------------------------------

## \$\$\$\$\$\$

La maggiorparte delle volte vi troverete ad accedere alle variabili tramite l'operatore **`$`**. Questo comando può essere utilizzato anche per creare una nuova variabile...

```{r,echo=TRUE}
iris$somma = iris$Sepal.Length + iris$Sepal.Width
str(iris)
```

# ESAME

<https://etherpad.wikimedia.org/p/arca-corsoR>
