---
title: "2.4_dataframe"
format: 
   revealjs:
     margin: 0.1
editor: visual
---

## Strutture Dati

-   vettori

-   fattori

-   liste

-   matrici

-   array

-   ***`dataframe`***

## Dataframe

Il dataframe è la struttura più "complessa", utile e potente di R. Da un punto di vista intuitivo è un foglio excel mentre da un punto di vista di R è una tipologia di lista con alcune caratteristiche/restrizioni

-   ogni elemento della lista è un **vettore** con un **nome associato** (aka una colonna)
-   ogni lista/colonna deve avere lo stesso numero di elementi
-   di conseguenza ogni riga ha lo stesso numero di elementi (**struttura rettangolare**)

## Creazione

Nella maggior parte dei casi vi capiterà d'importare (lo vedremo più avanti) più che creare dei dataframe, ma è importante prima capire come funzionano e come crearli/manipolarli.

```{r, echo=TRUE}
# Creo un dataframe con 3 colonne 
my_df = data.frame( col1 = 1:4, col2 = letters[1:4],
                    col3 = rnorm(4)) 
my_df
```

## Attributi

Il **`dataframe`** ha sia gli attributi della lista ovvero i ***names*** ma anche gli attributi della matrice ovvero le ***dimensioni*** (righe e colonne)

```{r, echo=TRUE}
typeof(my_df)
attributes(my_df)
dim(my_df)
```

------------------------------------------------------------------------

Come per le altre strutture che abbiamo visto, possiamo utlizzare le funzioni **`names()`** , **`dim()`**, **`nrow()`**, **`ncol()`**... per ottenere informazioni sulle caratteristiche del dataframe. La funzione più utile è **`str()`** poichè ci restituisce una veloce overview della struttura del dataframe: dimensioni, tipi di variabili,...

```{r,echo=TRUE}
str(iris) # iris è un dataset presente di default in R (?iris)
```

------------------------------------------------------------------------

## Indicizzazione

Si posso utlizzare sia le parentesi quadre **`[]`** che il simbolo del dollaro **`$`**

```{r, echo = TRUE}
my_df[1]  # estraggo un data.frame 5x1
my_df[[1]] # estraggo la prima colonna del data.frame
my_df$col1 # estraggo la prima colonna del data.frame
my_df[1,1] #  estraggo il primo elemento della prima colonna del data.frame
```

## Indicizzazione - Operatori relazionali

Una delle operazioni più comuni che dovrete affrontare sarà sicuramente quella di estrarre/valutare un sottoinsieme di valori presenti nel vostro dataset:

```{r, echo=TRUE}
# includo solo le righe in cui alla colonna1 i valori sono maggiori di 2
my_df[my_df$col1 > 2, ]
my_df[my_df[1] > 2, ] 
```

## Esempi

```{r}
my_df
```

::: incremental
-   `my_df[my_df$col1 > 2 & my_df$col1 < 4, ]`
    -   "3" "c" "-1.155393"
-   `my_df[my_df$col1== 2,  "col2"]`
    -   "b"
-   `my_df[my_df$col1== 2,  2]`
    -   "b"
:::

## Indicizzazione

Ci sono anche dei modi alternativi e più compatti di indicizzare. Ad esempio usando la funzione **`subset()`**:

```{r,echo=TRUE}

subset(iris, subset = Species == "setosa" & Petal.Length > 1.7)

```

equivalente a:

```{r,echo=TRUE}

iris[iris$Species == "setosa" & iris$Petal.Length > 1.7,]

```

------------------------------------------------------------------------

E' possibile anche selezionare colonne piuttosto che righe attraverso l'argomento ***`select`***:

```{r, echo=TRUE}
head(subset(iris, select = c(Sepal.Length, Species)), n = 3)
```

------------------------------------------------------------------------

Possiamo anche combinare le due cose:

```{r,echo=TRUE}
head(subset(iris, Species == "setosa" & Sepal.Length > 4, 
             c(Sepal.Length, Species)), n = 3)
```

... equivalente a:

```{r,echo=TRUE}

head(iris[iris$Species == "setosa" & iris$Sepal.Length > 4, 
          c("Sepal.Length","Species")],n = 3)
```

------------------------------------------------------------------------

La funzione **`subset()`** essenzialmente prende delle espressioni ***`Species == "setosa"`*** che vengono eseguite all'interno dell'ambiente dataframe specificato come primo argomento.

Un'operazione simile viene svolta dalla funzione **`with()`**:

```{r, echo=TRUE}
Species = "bo"
with(iris, Sepal.Length[3] + Sepal.Width[3])
```

L'espressione Sepal.Length + Sepal.Width viene eseguita all'interno (**`with()`**) del dataframe iris.

------------------------------------------------------------------------

## Indicizzazione

La maggiorparte delle volte vi troverete ad accedere alle variabili tramite l'operatore **`$`**. Questo comando può essere utilizzato anche per creare una nuova variabile...

```{r,echo=TRUE}
iris$somma = iris$Sepal.Length + iris$Sepal.Width
str(iris)
```

------------------------------------------------------------------------

Si applicano gli stessi concetti che abbiamo visto per i vettori, potete quindi sia creare che modificare variabili.

```{r, echo=TRUE}
my_df = data.frame(num = 1:4, let = letters[1:4])
my_df

# Modfico la variabile num aggiungendo 1
my_df$num = my_df$num+1

# Creo una terza variabile composta dalla varibile num e let
my_df$both = paste(my_df$num,my_df$let, sep = "_")

str(my_df)
```

------------------------------------------------------------------------

## Combinare Dataframes

Essendo simili a delle matrici, i dataframe si possono combinare tra loro attraverso le funzioni **`rbind()`**:

```{r,echo=TRUE, error=TRUE}
# primo dataframe
str(my_df)
# creo un secondo dataframe
my_df2 = data.frame(num = 4:7, lett = letters[1:4], 
                    both = paste(4:7,letters[1:4], sep = "_"))

str(my_df2)
```

------------------------------------------------------------------------

**Unisco i due dataframes**

-   I dataframes devono avere lo stesso numero di colonne

-   I nomi delle colonne devono essere identici

```{r,echo=TRUE, error=TRUE}
my_df3 = rbind(my_df,my_df2) 
```

------------------------------------------------------------------------

```{r,echo=TRUE, error=TRUE}
str(my_df)
str(my_df2)

```

**Sistemo i nomi**

```{r,echo=TRUE, error=TRUE}

names(my_df2) = names(my_df)
my_df3 = rbind(my_df,my_df2) 
str(my_df3)
```

------------------------------------------------------------------------

Potrebbe anche capitarvi di dover raccogliere differenti tipi di dato dallo stesso partecipante, e successivamente combinare le informazioni raccolte...

Dataframe contente i tempi di reazione:

```{r, echo=TRUE}
df_rt = data.frame(subj = factor(rep(c("caio","tizio"),each = 400)),
                   cond = factor(rep(c("easy","hard"), 
                                     each = 200, times = 2)),
                      rt = c(rlnorm(n = 400, meanlog = -1, sdlog = .25), rlnorm(n = 400, meanlog = -.7, sdlog =.3)))
```

Dataframe contente l'età:

```{r, echo=TRUE}
df_age = data.frame(subj = factor(c("caio","tizio")), age = c(20,3))

```

------------------------------------------------------------------------

```{r,echo=TRUE}
str(df_rt) # struttura dataframe tempi di reazione
head(df_rt)

str(df_age) # struttura dataframe età
head(df_age)
```

------------------------------------------------------------------------

In questo caso, è possibile utilizzare la funzione **`merge()`** e/o la funzione **`_join()`**:

```{r, echo=TRUE}
dfAll1 = merge(df_rt, df_age, by="subj")
str(dfAll1)
```

```{r, echo=TRUE, message=FALSE}
library(tidyverse)
dfAll2 = df_rt%>%
  left_join(df_age, by = c("subj")) # esistono anche right_join; full_join 
str(dfAll2)
```

## Tabelle di contingenza

E' possibile utilizzare le funzione **`table()`** sia per calcolare le frequenze che per computare delle tabelle di contigenze, per esempio per vedere quanti trial ho per ogni soggetto.

```{r, echo=TRUE}

# tengo solo rt compresi tra .200 e 1.5 secondi
df_rt_clean = df_rt[df_rt$rt > .25 & df_rt$rt < 1.5 ,] 

# quanti trial x ogni soggetto
table(df_rt_clean$subj) 

# quanti trial x ogni soggetto x condizione
table(df_rt_clean$subj,df_rt_clean$cond) 

```

## Esportazione e importazione dati

In R è possibile importare dati in molti formati differenti, più comunemente vi troverete ad importare dati ***.csv*** oppure ***.xlsx***.

Qui per esempio, esporto i dataframe in due formati differenti...

```{r, echo=TRUE}
library(readr) # carico il pacchetto readr
library(writexl) # carico il pacchetto writexl

write.csv(df_rt, file = "DATA/df_rt.csv",row.names = FALSE)
write_xlsx(df_age, path = "DATA/df_age.xlsx")
```

## Importo

```{r, echo=TRUE}
library(readxl) # carico il pacchetto readxl

df_rt_impo = read_csv("DATA/df_rt.csv") #utilizza il pacchetto readr

df_age_impo = read_xlsx("DATA/df_age.xlsx")
```

## Controllare la struttura

Cosa notate di diverso tra i due dataframe?

```{r, echo=TRUE, message=FALSE}
str(df_rt) # Data frame creato 
str(df_rt_impo) # Data frame caricato 
```

------------------------------------------------------------------------

Il dataframe viene importato come tibble ed in questo caso le variabili ***`factor`*** sono state importate come ***`character`***. Questo è modificabile o in importazione ( **`?read_csv`** ):

```{r,echo=TRUE,message=FALSE}
df_rt_impo1 = read_csv("DATA/df_rt.csv", 
                       col_types =
                         list(col_double(),col_factor(),
                              col_factor(),col_double()))
str(df_rt_impo1)
```

------------------------------------------------------------------------

o a posteriori attraverso il comando **`as.factor()`**:

```{r,echo=TRUE,message=FALSE}
df_rt_impo$subj = as.factor(df_rt_impo$subj)
df_rt_impo$cond = as.factor(df_rt_impo$cond)
str(df_rt_impo)
```

------------------------------------------------------------------------

equivalente a:

```{r,echo=TRUE,message=FALSE}
df_rt_impo2 = read_csv("DATA/df_rt.csv") %>% #library(tidyverse)
  mutate(subj = factor(subj), 
         cond = factor(cond)) 
str(df_rt_impo2)
```

(solo per farvi vedere come in ***R***, si possa risolvere un problema in differenti modi)

------------------------------------------------------------------------

Gli stessi concetti si applicano alla lettura di file xlsx:

```{r, echo=TRUE}
str(df_age_impo)
df_age_impo$subj=as.factor(df_age_impo$subj)
str(df_age_impo)
df_age_impo$subj=factor(df_age_impo$subj)
str(df_age_impo)
```

------------------------------------------------------------------------

Gli esempi che vi ho mostrato riguardano dati in formati **esterni** ad R, è possibile però anche salvare ed importare in formato **`R`** .

Il principale difetto è quello che sono appunto leggibili (principalmente) solo all'interno dell'ambiente R.

Se abbiamo la necessità di lavorare con software o linguaggi diversi è probabilmente meglio usare un formato più generico.

Se avanzerà del tempo andremo a vedere anche questo tipo di formato, il materiale è disponibile a questo [link](https://arca-dpss.github.io/course-R/extra/importing_data.html#1_Introduzione).

## Ora però facciamo un po' di pratica! {style="text-align: center;"}

<br/> Aprite e tenete aperto questo link:

<https://etherpad.wikimedia.org/p/arca-corsoR>
