---
title: "2.3_ListeMatriciArray"
format: 
   revealjs:
     margin: 0.1
editor: visual
---

## Strutture Dati

-   vettori

-   fattori

-   ***`liste`***

-   matrici

-   array

-   dataframe

## Liste

Le liste sono strutture flessibili che possono contenere oggetti di tipo differente e di differenti dimensioni (ogni elemento può essere a sua volta una lista)

```{r, echo=TRUE}
my_list = list("ciao!", 1:3, c(TRUE,FALSE), 
               list("ciao!", 1:3, c(TRUE,FALSE)))
str(my_list)
```

## Liste

La lista pur essendo unidimensionale, si sviluppa in profondità

```{r, echo=TRUE}
str(my_list)
```

## Liste

***Primo Livello***: lista

```{r, echo=TRUE}
str(my_list[2]) 
```

***Secondo Livello***: vettore numerico

```{r, echo=TRUE}
str(my_list[[2]]) 
```

***Terzo Livello***: numero intero

```{r, echo=TRUE}
str(my_list[[2]][1])# numero intero 
```

## Liste

E' possibile assegnare dei nomi agli elementi della lista...

```{r, echo=TRUE}
my_list_nam = list(parola = "ciao!",numeri =  1:3, 
                   logico = c(TRUE,FALSE), 
               lista = list("ciao!", 1:3, c(TRUE,FALSE)))
my_list_nam
```

## Liste

ed accerdervi chiamandoli per "nome" attraverso l'operatore **`$`**

```{r, echo=TRUE}
my_list_nam$parola

my_list_nam$lista #lista creata come elemento della lista
```

## Liste - Attributi

Come per i vettori anche le liste hanno una lunghezza (**`lenght()`**) ed eventualmente dei nomi (**`names()`**). Il comando **`str()`** (struttura) è molto utile per le liste perchè fornisce una visione sulla struttura:

```{r, echo=TRUE}

length(my_list_nam); names(my_list_nam)

str(my_list_nam)
```

## Liste - Indicizzazione

La differenza tra le parentesi quadre riguarda il fatto se vogliamo fare un subset della lista ottenendo un'altra lista oppure se vogliamo accedere direttamente all'elemento interno:

```{r, echo=TRUE}
my_list_nam[1] #ottenendo un'altra lista 

my_list_nam[[1]] # accedo all'elemento interno
```

## Liste - Indicizzazione

Se vogliamo selezionare più elementi (quindi fare un vero e proprio subset della lista) dobbiamo sempre usare le parentesi quadre singole:

```{r, echo=TRUE}

#lista composta dai primi due elementi della my_list_nam 
my_list_nam[1:2] 
```

## Liste - Indicizzazione Nested

Le liste hanno una struttura unidimensionale ma che si può sviluppare in profondità. Per selezionare elementi nested si possono concatenare più parentesi:

```{r, echo=TRUE}

my_list_nam[[4]]

my_list_nam[[4]][[1]]

my_list_nam[[4]][[2]]

```

## Liste - Perchè?

Sono flessibili, permettono di conservare/organizzare dati/informazioni complesse e varie. Per esempio la funzione **`lm()`** fornisce in output una lista contentente varie informazioni e risultati sul modello testato.

```{r, echo=TRUE}
N = 30; b0 = 0; b1 = 0.3; sigma = 1
x = rnorm(N, 0, 1); y = b0 + b1*x + rnorm(n = N, mean = 0, sd = sigma)
mod = lm(y ~ x)
str(mod)
```

## Strutture Dati

-   vettori

-   fattori

-   liste

-   ***`matrici`***

-   array

-   dataframe

## Matrici

Le matrici sono una struttura dati **bidimensionale** (caratterizzate da 2 dimensioni **`dim()`** ) dove il numero di righe rappresenta la dimensione 1 e il numero di colonne la dimensione 2.

```{r, echo=TRUE}
my_mat = matrix(data = 1:10, nrow = 2, ncol = 5, byrow = FALSE)
my_mat
```

```{r, echo=TRUE}
matrix(data = 1:10, nrow = 2, ncol = 5, byrow = TRUE)
```

## Matrici - Attributi

```{r, echo=TRUE}
attributes(my_mat)
```

```{r, echo=TRUE}
my_mat = matrix(data = 1:10, nrow = 2, 
                ncol = 5, dimnames = list(c("row1", "row2"), 
                                          c("col1", "col1",
                                            "col3","col4","col5")))
attributes(my_mat)
```

## Matrici - Caratteristiche

-   Possono contenere **una sola tipologia** di dati

-   Essendo **bidimensionali**, abbiamo bisogno di due indici di posizione (righe e colonne) per identificare un elemento

-   Possono essere viste come un **insieme** di singoli **vettori**

## Matrici - Caratteristiche

Il numero di righe e colonne non deve essere lo stesso necessariamente (matrice quadrata) ma il numero di righe deve essere compatibile con il vettore data:

```{r, echo=TRUE, warning=TRUE}
matrix(data = 1:10, ncol = 3, nrow = 3)
```

## Matrici

Cosa fa R di default?

```{r, echo=TRUE, warning=FALSE}

matrix(data = 1:10, ncol = 3, nrow = 3)

matrix(data = 1:2, ncol = 3, nrow = 3)

```

**`warnings`**: la funzione ci informa di qualcosa di potenzialmente problematico, ma (circa!!) tutto liscio

## Matrici - Indicizzazione

Per identificare uno o più elementi nella matrice abbiamo bisogno di indici/e di riga e/o colonna separati da virgola, sempre con le parentesi quadre: matrice\[riga, colonna\]

```{r, echo=TRUE}

my_mat
my_mat[1,1]

```

## Matrici - Indicizzazione

E' possibile anche selezionare un'intera riga o colonna

```{r, echo=TRUE}

my_mat[1,]

my_mat[,1]

```

## Matrici - Indicizzazione

Come per i vettori, anche in questo caso possiamo applicare l'indicizzazione logica:

```{r, echo=TRUE}
my_mat>2

# Tutti gli elementi maggiori di due
my_mat[my_mat>2]

```

## Vettori e Matrici

I vettori si creano attraverso la funzione **`c()`** e possono essere concatenati tra loro sempre attraverso la stessa funzione:

```{r, echo=TRUE}
my_vect1 = c(1:4); my_vect2 = c(5:10)
my_vect12 = c(my_vect1,my_vect2)
my_vect12
```

## Matrici

Similarmente, le matrici possono essere unite tra loro attraverso i comandi **`cbind()`** e **`rowbind()`** :

```{r, echo=TRUE}

my_mat = matrix(1:4,2,2)

cbind(my_mat, my_mat)

rbind(my_mat, my_mat)

```

## Operazioni con le matrici

Come per i vettori, anche alle matrici si possono applicare operazioni matematiche:

```{r, echo=TRUE}

# elemet-wise
my_mat*my_mat

# Prodotto matriciale
my_mat%*%my_mat
# (1*1 + 3*2) , (1*3 + 3*4)
# (2*1 + 4*2) , (2*3 + 4*4)
```

## Strutture Dati

-   vettori

-   fattori

-   liste

-   matrici

-   ***`array`***

-   dataframe

## Array

Gli array sono degli oggetti n-dimensionali (es., se la matrice è un quadrato un array è un cubo). Valgono le stesse proprietà della matrice scalate alle n dimensioni

```{r, echo=TRUE}

my_array = array(1:6, dim = c(2,3,2)) # esempio tridimensionale
my_array

```

## Array - Indicizzazione

L'indicizzazione avviene allo stesso modo delle matrici aggiungendo una dimensione

```{r, echo=TRUE}

my_array

my_array[1,1,1] # prima riga, prima colonna, prima "fetta"

my_array[1,2,1] # prima riga, seconda colonna, prima "fetta"

```

## Facciamo un po' di pratica! {style="text-align: center;"}

<br/> Aprite e tenete aperto questo link:

<https://etherpad.wikimedia.org/p/arca-corsoR>
